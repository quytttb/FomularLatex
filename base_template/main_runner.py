# Imports for new architecture
from question_type_loader import QuestionTypeLoader
from question_manager import QuestionManager  
from latex_document_builder import LaTeXDocumentBuilder, OutputFormat
from latex_document_builder import LaTeXDocumentBuilder, OutputFormat
from question_manager import QuestionManager
from question_type_loader import QuestionTypeLoader
import argparse
import logging
import sys
from typing import List, Tuple, Union, Any

# H·∫±ng s·ªë c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
DEFAULT_NUM_QUESTIONS = 3  # S·ªë c√¢u h·ªèi m·∫∑c ƒë·ªãnh
DEFAULT_FORMAT = 1         # 1: ƒë√°p √°n sau t·ª´ng c√¢u, 2: ƒë√°p √°n ·ªü cu·ªëi
DEFAULT_FILENAME = "optimization_questions.tex"  # T√™n file xu·∫•t ra m·∫∑c ƒë·ªãnh
DEFAULT_TITLE = "C√¢u h·ªèi T·ªëi ∆∞u h√≥a"             # Ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh


def parse_arguments() -> argparse.Namespace:
    """
    X·ª≠ l√Ω v√† l·∫•y c√°c tham s·ªë d√≤ng l·ªánh t·ª´ ng∆∞·ªùi d√πng.
    Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng Namespace ch·ª©a c√°c tham s·ªë ƒë√£ parse.
    """
    parser = argparse.ArgumentParser(
        description="Generator c√¢u h·ªèi t·ªëi ∆∞u h√≥a v·ªõi h·ªó tr·ª£ 2 format",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:
  python3 main_runner.py                    # T·∫°o 3 c√¢u h·ªèi, format 1
  python3 main_runner.py 5                  # T·∫°o 5 c√¢u h·ªèi, format 1
  python3 main_runner.py 5 2                # T·∫°o 5 c√¢u h·ªèi, format 2
  python3 main_runner.py -n 10 -f 2 -o test.tex  # T√πy ch·ªânh ƒë·∫ßy ƒë·ªß
        """
    )
    
    parser.add_argument(
        'num_questions', 
        nargs='?', 
        type=int, 
        default=DEFAULT_NUM_QUESTIONS,
        help=f'S·ªë c√¢u h·ªèi c·∫ßn t·∫°o (m·∫∑c ƒë·ªãnh: {DEFAULT_NUM_QUESTIONS})'
    )
    
    parser.add_argument(
        'format', 
        nargs='?', 
        type=int, 
        choices=[1, 2], 
        default=DEFAULT_FORMAT,
        help=f'Format: 1=ƒë√°p √°n ngay sau c√¢u h·ªèi, 2=ƒë√°p √°n ·ªü cu·ªëi (m·∫∑c ƒë·ªãnh: {DEFAULT_FORMAT})'
    )
    
    parser.add_argument(
        '-n', '--num-questions',
        type=int,
        dest='num_questions_override',
        help='S·ªë c√¢u h·ªèi c·∫ßn t·∫°o (ghi ƒë√® positional argument)'
    )
    
    parser.add_argument(
        '-f', '--format',
        type=int,
        choices=[1, 2],
        dest='format_override',
        help='Format output (ghi ƒë√® positional argument)'
    )
    
    parser.add_argument(
        '-o', '--output',
        type=str,
        default=DEFAULT_FILENAME,
        help=f'T√™n file output (m·∫∑c ƒë·ªãnh: {DEFAULT_FILENAME})'
    )
    
    parser.add_argument(
        '-t', '--title',
        type=str,
        default=DEFAULT_TITLE,
        help=f'Ti√™u ƒë·ªÅ document (m·∫∑c ƒë·ªãnh: "{DEFAULT_TITLE}")'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt'
    )
    
    args = parser.parse_args()
    
    # Override positional args with named args if provided
    if args.num_questions_override is not None:
        args.num_questions = args.num_questions_override
    if args.format_override is not None:
        args.format = args.format_override
        
    # Validate
    if args.num_questions <= 0:
        parser.error("S·ªë c√¢u h·ªèi ph·∫£i l·ªõn h∆°n 0")
        
    return args


def generate_questions(num_questions: int, output_format: int, verbose: bool = False) -> List[Any]:
    """
    Sinh danh s√°ch c√¢u h·ªèi t·ªëi ∆∞u h√≥a theo ƒë·ªãnh d·∫°ng mong mu·ªën.
    
    Tham s·ªë:
        num_questions: S·ªë l∆∞·ª£ng c√¢u h·ªèi c·∫ßn sinh
        output_format: 1 - ƒë√°p √°n sau t·ª´ng c√¢u, 2 - ƒë√°p √°n ·ªü cu·ªëi
        verbose: In chi ti·∫øt qu√° tr√¨nh sinh c√¢u h·ªèi
    Tr·∫£ v·ªÅ:
        Danh s√°ch c√¢u h·ªèi (d·∫°ng string ho·∫∑c tuple tu·ª≥ format)
    """
    # Load question types
    loader = QuestionTypeLoader(silent=not verbose)
    question_types = loader.load_available_types()
    
    # Create manager v√† sinh c√¢u h·ªèi
    manager = QuestionManager(question_types=question_types)
    return manager.generate_questions(num_questions, output_format, verbose)


def create_latex_file(questions_data: List, filename: str, title: str, output_format: int) -> None:
    """
    T·∫°o file LaTeX ch·ª©a danh s√°ch c√¢u h·ªèi ƒë√£ sinh.
    
    Tham s·ªë:
        questions_data: Danh s√°ch c√¢u h·ªèi
        filename: T√™n file xu·∫•t ra
        title: Ti√™u ƒë·ªÅ t√†i li·ªáu
        output_format: ƒê·ªãnh d·∫°ng ƒë√°p √°n
    """
    try:
        latex_builder = LaTeXDocumentBuilder()
        output_format_enum = OutputFormat.IMMEDIATE_ANSWERS if output_format == 1 else OutputFormat.ANSWERS_AT_END
        
        latex_content = latex_builder.build_document(questions_data, title, output_format_enum)
        
        with open(filename, "w", encoding="utf-8") as f:
            f.write(latex_content)
            
    except IOError as e:
        raise IOError(f"Kh√¥ng th·ªÉ ghi file {filename}: {e}")


def main() -> None:
    """
    H√†m main: ƒëi·ªÅu ph·ªëi to√†n b·ªô qu√° tr√¨nh sinh c√¢u h·ªèi t·ªëi ∆∞u h√≥a v√† xu·∫•t ra file LaTeX.
    """
    try:
        # Parse arguments
        args = parse_arguments()
        
        # Setup logging
        if args.verbose:
            logging.basicConfig(level=logging.INFO)
            
        # Generate questions
        questions_data = generate_questions(
            args.num_questions, 
            args.format, 
            args.verbose
        )
        
        if not questions_data:
            print("‚ùå L·ªói: Kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi n√†o")
            sys.exit(1)
            
        # Create LaTeX file
        create_latex_file(questions_data, args.output, args.title, args.format)
        
        # Success messages
        print(f"‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng {args.output} v·ªõi {len(questions_data)} c√¢u h·ªèi")
        print(f"üìÑ Bi√™n d·ªãch b·∫±ng: xelatex {args.output}")
        print(f"üìã Format: {args.format} ({'ƒë√°p √°n ngay sau c√¢u h·ªèi' if args.format == 1 else 'ƒë√°p √°n ·ªü cu·ªëi'})")
        
    except KeyboardInterrupt:
        print("\n‚ùå ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng")
        sys.exit(1)
    except ValueError as e:
        print(f"‚ùå L·ªói tham s·ªë: {e}")
        sys.exit(1)
    except IOError as e:
        print(f"‚ùå L·ªói file: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
