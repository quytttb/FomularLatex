"""
Question Manager - Qu·∫£n l√Ω qu√° tr√¨nh sinh c√¢u h·ªèi v·ªõi retry, timeout v√† error handling
"""
import random
import signal
from typing import List, Type, Union, Tuple, Any, Optional
from question_type_loader import QuestionTypeLoader


class QuestionTimeoutError(Exception):
    """Exception cho timeout khi sinh c√¢u h·ªèi"""
    pass


class QuestionGenerationError(Exception):
    """Exception cho l·ªói sinh c√¢u h·ªèi"""
    pass


class QuestionManager:
    """
    Manager class qu·∫£n l√Ω qu√° tr√¨nh sinh c√¢u h·ªèi v·ªõi c√°c t√≠nh nƒÉng:
    - Retry mechanism
    - Timeout protection
    - Error handling v√† reporting
    - Progress tracking
    """
    
    # Constants
    DEFAULT_MAX_RETRIES = 3
    DEFAULT_TIMEOUT_SECONDS = 30
    
    def __init__(
        self, 
        question_types: Optional[List[Type]] = None,
        max_retries: int = DEFAULT_MAX_RETRIES,
        timeout_seconds: int = DEFAULT_TIMEOUT_SECONDS
    ):
        """
        Kh·ªüi t·∫°o QuestionManager
        
        Args:
            question_types: Danh s√°ch c√°c class c√¢u h·ªèi kh·∫£ d·ª•ng
            max_retries: S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa khi sinh c√¢u h·ªèi th·∫•t b·∫°i
            timeout_seconds: Timeout (gi√¢y) cho m·ªói l·∫ßn sinh c√¢u h·ªèi
        """
        self.question_types = question_types or []
        self.max_retries = max_retries
        self.timeout_seconds = timeout_seconds
        self.failed_count = 0
        self.stats = {
            'total_generated': 0,
            'total_failed': 0,
            'retry_attempts': 0,
            'timeout_errors': 0
        }
        
    def set_question_types(self, question_types: List[Type]) -> None:
        """
        C·∫≠p nh·∫≠t danh s√°ch question types
        
        Args:
            question_types: Danh s√°ch class c√¢u h·ªèi m·ªõi
        """
        self.question_types = question_types
        
    def generate_questions(
        self, 
        num_questions: int, 
        output_format: int, 
        verbose: bool = False
    ) -> List[Union[str, Tuple[str, str]]]:
        """
        Sinh danh s√°ch c√¢u h·ªèi v·ªõi retry v√† timeout protection
        
        Args:
            num_questions: S·ªë l∆∞·ª£ng c√¢u h·ªèi c·∫ßn sinh
            output_format: 1 - ƒë√°p √°n sau t·ª´ng c√¢u, 2 - ƒë√°p √°n ·ªü cu·ªëi
            verbose: In chi ti·∫øt qu√° tr√¨nh sinh c√¢u h·ªèi
            
        Returns:
            List[Union[str, Tuple[str, str]]]: Danh s√°ch c√¢u h·ªèi ƒë√£ sinh
            
        Raises:
            QuestionGenerationError: Khi kh√¥ng th·ªÉ sinh ƒë∆∞·ª£c c√¢u h·ªèi n√†o
            ValueError: Khi tham s·ªë kh√¥ng h·ª£p l·ªá
        """
        # Validate input
        if num_questions <= 0:
            raise ValueError("S·ªë c√¢u h·ªèi ph·∫£i l·ªõn h∆°n 0")
            
        if not self.question_types:
            raise QuestionGenerationError("Kh√¥ng c√≥ lo·∫°i c√¢u h·ªèi n√†o kh·∫£ d·ª•ng")
            
        if output_format not in [1, 2]:
            raise ValueError("Format ch·ªâ c√≥ th·ªÉ l√† 1 ho·∫∑c 2")
        
        # Reset stats
        self.stats = {
            'total_generated': 0,
            'total_failed': 0,
            'retry_attempts': 0,
            'timeout_errors': 0
        }
        self.failed_count = 0
        
        questions_data = []
        
        if verbose:
            print(f"üìã C√≥ {len(self.question_types)} lo·∫°i c√¢u h·ªèi kh·∫£ d·ª•ng")
            
        for i in range(1, num_questions + 1):
            question_result = self._generate_single_question(i, output_format, verbose)
            if question_result is not None:
                questions_data.append(question_result)
                self.stats['total_generated'] += 1
            else:
                self.stats['total_failed'] += 1
        
        # Report final stats
        if self.failed_count > 0:
            print(f"‚ö†Ô∏è  C√≥ {self.failed_count} c√¢u h·ªèi kh√¥ng t·∫°o ƒë∆∞·ª£c")
            
        if verbose:
            self._print_final_stats()
            
        if not questions_data:
            raise QuestionGenerationError("Kh√¥ng th·ªÉ t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi n√†o")
            
        return questions_data
    
    def _generate_single_question(
        self, 
        question_number: int, 
        output_format: int, 
        verbose: bool
    ) -> Union[str, Tuple[str, str], None]:
        """
        Sinh m·ªôt c√¢u h·ªèi duy nh·∫•t v·ªõi retry mechanism
        
        Args:
            question_number: S·ªë th·ª© t·ª± c√¢u h·ªèi
            output_format: Format output
            verbose: Verbose mode
            
        Returns:
            Union[str, Tuple[str, str], None]: C√¢u h·ªèi ƒë√£ sinh ho·∫∑c None n·∫øu th·∫•t b·∫°i
        """
        for retry in range(self.max_retries):
            try:
                # Setup timeout
                signal.signal(signal.SIGALRM, self._timeout_handler)
                signal.alarm(self.timeout_seconds)
                
                # Random ch·ªçn lo·∫°i c√¢u h·ªèi
                question_type = random.choice(self.question_types)
                question_instance = question_type()
                
                # Generate d·ª±a tr√™n format
                if output_format == 1:
                    result = question_instance.generate_question(question_number, include_multiple_choice=True)
                else:
                    result = question_instance.generate_question(question_number, include_multiple_choice=False)
                
                # Cancel timeout
                signal.alarm(0)
                
                if verbose:
                    print(f"‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng c√¢u h·ªèi {question_number} (lo·∫°i: {question_type.__name__})")
                
                return result
                
            except QuestionTimeoutError:
                signal.alarm(0)  # Cancel timeout
                self.stats['timeout_errors'] += 1
                error_msg = f"Timeout t·∫°o c√¢u h·ªèi {question_number}"
                self._handle_retry_error(retry, question_number, error_msg, verbose)
                
            except Exception as e:
                signal.alarm(0)  # Cancel timeout
                error_msg = f"L·ªói t·∫°o c√¢u h·ªèi {question_number}: {e}"
                self._handle_retry_error(retry, question_number, error_msg, verbose)
            
            self.stats['retry_attempts'] += 1
        
        # T·∫•t c·∫£ retry ƒë·ªÅu th·∫•t b·∫°i
        self.failed_count += 1
        return None
    
    def _handle_retry_error(
        self, 
        retry: int, 
        question_number: int, 
        error_msg: str, 
        verbose: bool
    ) -> None:
        """
        X·ª≠ l√Ω error trong retry loop
        
        Args:
            retry: L·∫ßn th·ª≠ hi·ªán t·∫°i (0-based)
            question_number: S·ªë c√¢u h·ªèi
            error_msg: Th√¥ng b√°o l·ªói
            verbose: Verbose mode
        """
        if retry == self.max_retries - 1:
            # L·∫ßn th·ª≠ cu·ªëi c≈©ng th·∫•t b·∫°i
            print(f"‚ùå {error_msg} sau {self.max_retries} l·∫ßn th·ª≠")
        elif verbose:
            # Ch∆∞a ph·∫£i l·∫ßn th·ª≠ cu·ªëi, v√† ƒëang ·ªü verbose mode
            print(f"‚ö†Ô∏è  {error_msg}, th·ª≠ l·∫°i ({retry + 1}/{self.max_retries})")
    
    def _timeout_handler(self, signum, frame):
        """
        Signal handler cho timeout
        
        Args:
            signum: Signal number
            frame: Frame object
            
        Raises:
            QuestionTimeoutError: Lu√¥n raise timeout error
        """
        raise QuestionTimeoutError("Qu√° th·ªùi gian t·∫°o c√¢u h·ªèi")
    
    def _print_final_stats(self) -> None:
        """In th·ªëng k√™ cu·ªëi c√πng"""
        print(f"üìä Th·ªëng k√™ sinh c√¢u h·ªèi:")
        print(f"   - T·ªïng s·ªë sinh th√†nh c√¥ng: {self.stats['total_generated']}")
        print(f"   - T·ªïng s·ªë th·∫•t b·∫°i: {self.stats['total_failed']}")
        print(f"   - S·ªë l·∫ßn retry: {self.stats['retry_attempts']}")
        print(f"   - S·ªë l·∫ßn timeout: {self.stats['timeout_errors']}")
    
    def get_stats(self) -> dict:
        """
        Tr·∫£ v·ªÅ th·ªëng k√™ hi·ªán t·∫°i
        
        Returns:
            dict: Dictionary ch·ª©a c√°c th·ªëng k√™
        """
        return self.stats.copy()


# Convenience function ƒë·ªÉ d√πng tr·ª±c ti·∫øp
def generate_questions_with_manager(
    num_questions: int,
    output_format: int,
    question_types: Optional[List[Type]] = None,
    verbose: bool = False,
    max_retries: int = QuestionManager.DEFAULT_MAX_RETRIES,
    timeout_seconds: int = QuestionManager.DEFAULT_TIMEOUT_SECONDS
) -> List[Union[str, Tuple[str, str]]]:
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ sinh c√¢u h·ªèi s·ª≠ d·ª•ng QuestionManager
    
    Args:
        num_questions: S·ªë c√¢u h·ªèi c·∫ßn sinh
        output_format: Format output (1 ho·∫∑c 2)
        question_types: Danh s√°ch question types (n·∫øu None s·∫Ω auto-load)
        verbose: Verbose mode
        max_retries: S·ªë l·∫ßn retry t·ªëi ƒëa
        timeout_seconds: Timeout cho m·ªói c√¢u h·ªèi
        
    Returns:
        List[Union[str, Tuple[str, str]]]: Danh s√°ch c√¢u h·ªèi
    """
    if question_types is None:
        loader = QuestionTypeLoader(silent=not verbose)
        question_types = loader.load_available_types()
    
    manager = QuestionManager(
        question_types=question_types,
        max_retries=max_retries,
        timeout_seconds=timeout_seconds
    )
    
    return manager.generate_questions(num_questions, output_format, verbose)
