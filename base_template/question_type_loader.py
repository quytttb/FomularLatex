"""
Question Type Loader - Qu·∫£n l√Ω vi·ªác load v√† import c√°c lo·∫°i c√¢u h·ªèi
"""
from typing import List, Type, Tuple, Dict, Any, Optional
import importlib
import logging


class QuestionTypeLoader:
    """
    Class chuy√™n load v√† qu·∫£n l√Ω c√°c lo·∫°i c√¢u h·ªèi t·ª´ modules kh√°c nhau
    """
    
    def __init__(self, silent: bool = False):
        """
        Kh·ªüi t·∫°o loader
        
        Args:
            silent: True ƒë·ªÉ kh√¥ng in th√¥ng b√°o load, False ƒë·ªÉ in chi ti·∫øt
        """
        self.silent = silent
        self.loaded_types: List[Type] = []
        self.failed_loads: Dict[str, str] = {}
        
    def add_module_mapping(self, module_name: str, class_name: str) -> None:
        """
        Th√™m mapping module-class ƒë·ªÉ load
        
        Args:
            module_name: T√™n module ƒë·ªÉ import
            class_name: T√™n class trong module
        """
        try:
            question_class = self._load_single_module(module_name, class_name)
            if question_class:
                self.loaded_types.append(question_class)
                if not self.silent:
                    print(f"‚úÖ ƒê√£ load th√†nh c√¥ng: {class_name} t·ª´ {module_name}")
        except Exception as e:
            self.failed_loads[f"{module_name}.{class_name}"] = str(e)
            if not self.silent:
                print(f"‚ùå L·ªói khi load {class_name} t·ª´ {module_name}: {e}")
    
    def load_available_types(self, modules_mapping: Optional[List[Tuple[str, str]]] = None) -> List[Type]:
        """
        Load t·∫•t c·∫£ c√°c lo·∫°i c√¢u h·ªèi kh·∫£ d·ª•ng
        
        Args:
            modules_mapping: Danh s√°ch (module_name, class_name) ƒë·ªÉ load.
                           N·∫øu None, s·∫Ω d√πng mapping m·∫∑c ƒë·ªãnh.
        
        Returns:
            List[Type]: Danh s√°ch c√°c class c√¢u h·ªèi ƒë√£ load th√†nh c√¥ng
        """
        if modules_mapping is None:
            modules_mapping = self._get_default_modules_mapping()
        
        self.loaded_types.clear()
        self.failed_loads.clear()
        
        for module_name, class_name in modules_mapping:
            self.add_module_mapping(module_name, class_name)
        
        # In summary
        if not self.silent:
            self._print_load_summary()
        
        return self.loaded_types.copy()
    
    def get_loaded_types(self) -> List[Type]:
        """
        Tr·∫£ v·ªÅ danh s√°ch c√°c types ƒë√£ load
        
        Returns:
            List[Type]: Danh s√°ch c√°c class ƒë√£ load
        """
        return self.loaded_types.copy()
    
    def get_failed_loads(self) -> Dict[str, str]:
        """
        Tr·∫£ v·ªÅ danh s√°ch c√°c module/class load th·∫•t b·∫°i v√† l√Ω do
        
        Returns:
            Dict[str, str]: {module.class: error_message}
        """
        return self.failed_loads.copy()
    
    def _load_single_module(self, module_name: str, class_name: str) -> Type:
        """
        Load m·ªôt module v√† l·∫•y class t·ª´ ƒë√≥
        
        Args:
            module_name: T√™n module
            class_name: T√™n class
            
        Returns:
            Type: Class ƒë√£ load
            
        Raises:
            ImportError: Khi kh√¥ng th·ªÉ import module
            AttributeError: Khi class kh√¥ng t·ªìn t·∫°i trong module
        """
        try:
            # Import module s·ª≠ d·ª•ng importlib
            module = importlib.import_module(module_name)
            
            # Ki·ªÉm tra class c√≥ t·ªìn t·∫°i
            if not hasattr(module, class_name):
                raise AttributeError(f"Class {class_name} kh√¥ng t·ªìn t·∫°i trong module {module_name}")
            
            # L·∫•y class
            question_class = getattr(module, class_name)
            
            # Validate class (optional - c√≥ th·ªÉ th√™m validation logic)
            self._validate_question_class(question_class, class_name)
            
            return question_class
            
        except ImportError as e:
            raise ImportError(f"Kh√¥ng th·ªÉ import module {module_name}: {e}")
        except Exception as e:
            raise Exception(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi load {module_name}.{class_name}: {e}")
    
    def _validate_question_class(self, question_class: Type, class_name: str) -> None:
        """
        Validate class c√≥ ƒë√∫ng l√† question class kh√¥ng
        
        Args:
            question_class: Class c·∫ßn validate
            class_name: T√™n class ƒë·ªÉ b√°o l·ªói
            
        Raises:
            ValueError: Khi class kh√¥ng h·ª£p l·ªá
        """
        # Ki·ªÉm tra c√≥ ph·∫£i class kh√¥ng
        if not isinstance(question_class, type):
            raise ValueError(f"{class_name} kh√¥ng ph·∫£i l√† m·ªôt class")
        
        # C√≥ th·ªÉ th√™m c√°c validation kh√°c nh∆∞:
        # - Ki·ªÉm tra inherit t·ª´ BaseOptimizationQuestion
        # - Ki·ªÉm tra c√≥ c√°c method required kh√¥ng
        # - etc.
    
    def _get_default_modules_mapping(self) -> List[Tuple[str, str]]:
        """
        Tr·∫£ v·ªÅ mapping m·∫∑c ƒë·ªãnh c·ªßa modules v√† classes
        
        Returns:
            List[Tuple[str, str]]: Danh s√°ch (module_name, class_name)
        """
        return [
            ("force_equilibrium_three_legs", "CanBangLucBaChan"),
            # C√≥ th·ªÉ th√™m modules kh√°c ·ªü ƒë√¢y trong t∆∞∆°ng lai
            # ("optimization_problem_2", "OptimizationProblem2"),
            # ("calculus_problems", "CalculusQuestion"),
        ]
    
    def _print_load_summary(self) -> None:
        """In summary v·ªÅ qu√° tr√¨nh load"""
        successful_count = len(self.loaded_types)
        failed_count = len(self.failed_loads)
        
        if failed_count > 0:
            print(f"‚ö†Ô∏è  C√≥ {failed_count} module/class load th·∫•t b·∫°i:")
            for module_class, error in self.failed_loads.items():
                print(f"   - {module_class}: {error}")
        
        if successful_count == 0:
            print("‚ö†Ô∏è  Kh√¥ng c√≥ d·∫°ng to√°n n√†o ƒë∆∞·ª£c load. H·ªá th·ªëng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng.")
        else:
            print(f"üìö T·ªïng c·ªông ƒë√£ load {successful_count} d·∫°ng to√°n")


# Convenience function ƒë·ªÉ d√πng tr·ª±c ti·∫øp (backward compatibility)
def get_available_question_types(silent: bool = False) -> List[Type]:
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ load c√°c lo·∫°i c√¢u h·ªèi (t∆∞∆°ng th√≠ch v·ªõi code c≈©)
    
    Args:
        silent: True ƒë·ªÉ kh√¥ng in th√¥ng b√°o
        
    Returns:
        List[Type]: Danh s√°ch c√°c class c√¢u h·ªèi
    """
    loader = QuestionTypeLoader(silent=silent)
    return loader.load_available_types()
