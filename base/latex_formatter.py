"""
LaTeX document formatting utilities.
"""

from typing import List, Dict, Any
from .constants import QuestionConfig


class LaTeXFormatter:
    """Handles LaTeX document generation and formatting."""
    
    @staticmethod
    def get_document_header() -> str:
        """Get standard LaTeX document header with Vietnamese support."""
        return """\\documentclass[a4paper,12pt]{article}
\\usepackage{fontspec}
\\usepackage{amsmath,amssymb}
\\usepackage{geometry}
\\usepackage{enumitem}
\\usepackage{array}
\\usepackage{booktabs}

% Set fonts
\\setmainfont{Times New Roman}
\\newfontfamily\\vietnamesefont{Times New Roman}

% Page setup
\\geometry{left=2cm,right=2cm,top=2cm,bottom=2cm}
\\setlength{\\parindent}{0pt}
\\setlength{\\parskip}{6pt}

% Custom commands
\\newcommand{\\points}[1]{\\textit{(#1 điểm)}}
\\newcommand{\\correct}{$\\checkmark$}

% Document title setup
\\title{Bài Tập Toán Học}
\\author{Generated by Formula LaTeX}
\\date{\\today}

\\begin{document}
\\maketitle

"""

    @staticmethod
    def get_document_footer() -> str:
        """Get standard LaTeX document footer."""
        return """
\\end{document}
"""

    @staticmethod
    def format_multiple_choice_question(question_num: int, 
                                      question_text: str,
                                      options: List[str],
                                      correct_index: int = 0) -> str:
        """Format a multiple choice question.
        
        Args:
            question_num: Question number
            question_text: The question statement
            options: List of answer choices
            correct_index: Index of correct answer (for marking)
            
        Returns:
            Formatted LaTeX question string
        """
        choices = ['A', 'B', 'C', 'D']
        
        latex_content = f"\\textbf{{Câu {question_num}:}} {question_text}\n\n"
        latex_content += "\\begin{enumerate}[label=\\Alph*)]\n"
        
        for i, option in enumerate(options[:4]):  # Limit to 4 options
            marker = " \\correct" if i == correct_index else ""
            latex_content += f"    \\item {option}{marker}\n"
        
        latex_content += "\\end{enumerate}\n\n"
        return latex_content

    @staticmethod
    def format_true_false_question(question_num: int,
                                 question_text: str, 
                                 statements: List[Dict[str, Any]]) -> str:
        """Format a true/false question with multiple statements.
        
        Args:
            question_num: Question number
            question_text: Main question text
            statements: List of dicts with 'text' and 'is_correct' keys
            
        Returns:
            Formatted LaTeX question string
        """
        latex_content = f"\\textbf{{Câu {question_num}:}} {question_text}\n\n"
        
        choices = ['a', 'b', 'c', 'd']
        
        for i, stmt in enumerate(statements[:4]):  # Limit to 4 statements
            marker = "*" if stmt.get('is_correct', False) else ""
            latex_content += f"{choices[i]}) {stmt['text']}{marker}\n\n"
        
        return latex_content

    @staticmethod
    def format_solution_section(solution_text: str) -> str:
        """Format the solution section.
        
        Args:
            solution_text: The solution content
            
        Returns:
            Formatted solution section
        """
        return f"""
\\textbf{{Lời giải:}}

{solution_text}

"""

    @staticmethod
    def create_complete_document(questions: List[str], 
                               solutions: List[str] = None) -> str:
        """Create a complete LaTeX document.
        
        Args:
            questions: List of formatted question strings
            solutions: Optional list of solution strings
            
        Returns:
            Complete LaTeX document string
        """
        document = LaTeXFormatter.get_document_header()
        
        # Add questions
        for question in questions:
            document += question + "\n"
        
        # Add solutions if provided
        if solutions:
            document += "\\newpage\n\\section*{Đáp án và lời giải}\n\n"
            for i, solution in enumerate(solutions, 1):
                document += f"\\subsection*{{Câu {i}}}\n"
                document += LaTeXFormatter.format_solution_section(solution)
        
        document += LaTeXFormatter.get_document_footer()
        return document
